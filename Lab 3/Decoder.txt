module Decoder(input [3:0] S, output [6:0] D);
    
assign D[0] = ~S[3] & ~S[2] & ~S[1] & S[0] // a
 | ~S[3] & S[2] & ~S[1] & ~S[0]
 | S[3] & S[2] & ~S[1] & S[0]
 | S[3] & ~S[2] & S[1] & S[0];
assign D[1] = S[2] & S[1] & ~S[0] // b
 | S[3] & S[1] & S[0]
 | ~S[3] & S[2] & ~S[1] & S[0]
 | S[3] & S[2] & ~S[1] & ~S[0];
assign D[2] = ~S[3] & ~S[2] & S[1] & ~S[0] // c
 | S[3] & S[2] & S[1]
 | S[3] & S[2] & ~S[0];
assign D[3] = ~S[3] & ~S[2] & ~S[1] & S[0] // d
 | ~S[3] & S[2] & ~S[1] & ~S[0]
 | S[3] & ~S[2] & S[1] & ~S[0]
 | S[2] & S[1] & S[0];
assign D[4] = ~S[3] & S[0] // e
 | ~S[3] & S[2] & ~S[1]
 | ~S[2] & ~S[1] & S[0];
assign D[5] = ~S[3] & ~S[2] & S[0] // f
 | ~S[3] & ~S[2] & S[1]
 | ~S[3] & S[1] & S[0]
 | S[3] & S[2] & ~S[1] & S[0];
assign D[6] = ~S[3] & ~S[2] & ~S[1] // g
 | S[3] & S[2] & ~S[1] & ~S[0]
 | ~S[3] & S[2] & S[1] & S[0];


endmodule