`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 26.03.2021 08:59:05
// Design Name: 
// Module Name: Decoder
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module Decoder(input [3:0] S, output [6:0] D); //a = D[6] ... b = D[5] ...
      
     assign D[6] = S[0] | S[2] | (S[0]&S[1]&S[3]) | (S[0]&S[2]&S[3]); //1 + 4 + B + D
     assign D[5] = (S[0]&S[2]) | (S[1]&S[2]) | (S[0]&S[1]&S[3]) | (S[2]&S[3]) | (S[1]&S[2]&S[3]) | (S[0]&S[1]&S[2]&S[3]); //5 + 6 + B + C + E + F
     assign D[4] = S[1] | (S[2]&S[3]) | (S[1]&S[2]&S[3]) | (S[0]&S[1]&S[2]&S[3]); // 2 + C + E + F
     assign D[3] = S[0] | S[2] | (S[0]&S[1]&S[2]) | (S[1]&S[3]) | (S[0]&S[1]&S[2]&S[3]); //1 + 4 + 7 + A + F
     assign D[2] = S[0] | (S[1]&S[2]) | S[2] | (S[0]&S[2]) | (S[0]&S[1]&S[2]) | (S[0]&S[3]); // 1 + 3 + 4 + 5 + 7 + 9
     assign D[1] = S[0] | S[1] | (S[1]&S[2]) | (S[0]&S[1]&S[2]) | (S[0]&S[2]&S[3]); // 1 + 2 + 3 + 7 + D
     assign D[0] = S[0] | (S[0]&S[1]&S[2]) | (S[2]&S[3]); // 0 + 1 + 7 + C
     

endmodule
