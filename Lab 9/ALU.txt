`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company:  ETH Zurich
// Engineer: Frank K. Gurkaynak
// 
// Create Date:    12:51:05 03/17/2011 
// Design Name:    MIPS processor
// Module Name:    ALU 
// Project Name:   Digital Circuits Lab Exercuse
// Target Devices: 
// Tool versions: 
// Description:    This is one possible solution to the
//                 ALU description from Lab5a
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module ALU( 
  input  [31:0] a,
  input  [31:0] b,
  input  [5:0] aluop,           //#1. 6-bit signal
  input  [4:0] ShAmt,           //#2. ShAmt signal
  input CLK,                    //#4. clock signal
  input RESET,                  //#4. reset signal
  output [31:0] result,
  output zero
 );
        
  wire [31:0] logicout;   // output of the logic block
  wire [31:0] addout;     // adder subtractor out
  wire [31:0] arithout_prior;  //# 5. helper variable so that arithout does not get assigned multiple times
  //wire [31:0] arithout_prior_1;
  //wire [31:0] arithout_prior_2;
  wire [31:0] arithout;   // output after alt
  wire [31:0] n_b;        // inverted b
  wire [31:0] s_b;        //# 3. shifted b
  wire [31:0] sel_b;      // select b or n_b;
  wire [31:0] slt;        // output of the slt extension
  
  wire [1:0] logicsel;    // lower two bits of aluop;
  
  reg [31:0] Lo;          // 3. Result of the Gauss formula
  
  // logic select 
  assign logicsel = aluop[1:0];
  assign logicout = (logicsel == 2'b00) ? a & b :
                    (logicsel == 2'b01) ? a | b :
                    (logicsel == 2'b10) ? a ^ b :
                                        ~(a | b);
  
  // adder subtractor
  assign n_b = ~b ;  // invert b
  assign sel_b = (aluop[1])? n_b : b ;
  assign addout = a + sel_b + aluop[1];
  
  // set less than operator
  assign slt = {31'b0,addout[31]};
  
  //# 3. multiplier
  //# 3. Assigning shifted b
  assign s_b = (aluop == 6'b000010) ? (b >> ShAmt) : b;  //# 3. Selecting b or shifted b.
  
 //# 4. loading the multiplication result into the register
 always@(posedge CLK)
 
    begin
    
    if (RESET == 1)
    
    Lo <= 32'b0;
    
    else if (aluop == 6'b011001)
    
    Lo <= a * b;
    
    end 
  
  // arith out
 
reg [31:0] arithout_tmp;


always@(*)

begin

if (aluop == 6'b000010)
        arithout_tmp = s_b;
else if (aluop == 6'b010010)
        arithout_tmp = Lo;
else if (aluop[3] == 1)
        arithout_tmp = slt;
else if (aluop[3] == 0)
        arithout_tmp = addout;
    
end
 
assign arithout = arithout_tmp;

/*
  assign arithout_prior_1 = (aluop[3]) ? slt : addout;
  
  //# 5. copy the register into the output if aluop has a specific value
  assign arithout_prior_2 = (aluop == 6'b010010) ? Lo : arithout_prior_1;
  
  assign arithout = (aluop == 6'b000010) ? s_b : arithout_prior_2;
 */ 
  
  // final out
  assign result = (aluop[2]) ? logicout : arithout;
  // the zero
  assign zero = (result == 32'b0) ? 1: 0;
  
  
  
  
  
endmodule
